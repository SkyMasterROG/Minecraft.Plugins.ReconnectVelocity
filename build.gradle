plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = project.maven_group
version = project.plugin_version
description = project.plugin_description
archivesBaseName = project.archives_base_name

repositories {
    mavenLocal()
    maven {
        name = "papermc-repo"
        //url = uri('https://nexus.velocitypowered.com/repository/maven-public/')
        url = uri('https://repo.papermc.io/repository/maven-public/')
    }
    maven {
        name = "jitpack.io"
        url = uri('https://jitpack.io')
    }
    maven {
        name = "apache-maven-repo"
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"

    api libs.me.carleslc.simple.yaml.simple.yaml
    api libs.org.apache.commons.commons.lang3
    api libs.mysql.mysql.connector.java
    api libs.org.mariadb.jdbc.mariadb.java.client
    api libs.com.zaxxer.hikaricp
    api libs.org.json.json
    api libs.org.xerial.sqlite.jdbc

    compileOnly "com.gitlab.ruany:LiteBansAPI:0.4.1"
}

//java.sourceCompatibility = JavaVersion.VERSION_14
def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

/*publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}*/

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    // https://stackoverflow.com/questions/4871656/using-gradle-to-build-a-jar-with-dependencies
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    /*manifest {
        attributes "Main-Class": "com.mattmx.reconnect.ReconnectVelocity"
    }*/

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
